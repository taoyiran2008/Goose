说明

将整个工程，需要的第三方依赖dependency，抽离出来，包括：
libs下的第三方jar包
jni下的so包
glide中引用的第三方依赖
从而实现统一管理依赖，避免使用不同版本的gradle dependency导致的编译错误

模块化的目的是，将工程中公用部分进行抽离和解耦，从而增加模块的复用性（之前使用包划分来管理，当开始创建
新的项目，将包和类挪来挪去，会因为包名import错误，缺少资源文件引用，缺少类引用，而导致一系列错误，解决
这些问题，需要不少时间。无法实现即插即用 plug and play）。除此以外，模块化可以减少编译速度。

app --> base
app --> utility, widget
1 app主模块会依赖其他模块
2 模块之间不应当存在双向依赖(mdm -> enterprise service -> dpm -> dpms)
3 其他模块间尽量保持独立，但是base作为从app中抽出的架构模块，可以依赖utility, widget
4 third party模块仅仅作为管理第三方依赖用，全工程可见（其他所有模块都可以依赖它），比如gson、rxjava，
他们作为第三方组件，已经被良好的进行了封装，我们无需考虑他们的依赖关系，就把它们当作是Android sdk来用，而且
我们也无需担心重复依赖、循环依赖等导致的编译错误，as会管理好依赖关系。一句话，干（用）就完了

thirdparty主要是为了单独管理工程全局的依赖包，当然也可以把一些都可能用到的资源比如colors.xml放到里面管理，
如果把它挪到新的工程使用，也可以根据实际需要对依赖关系进行增减，量身定制。
