package com.taoyr.app.utility;

import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;

import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;


public class Decode {
    public static String RC4Decode(String paramString1, String paramString2) {
         if ((paramString1 == null) || (paramString2 == null)) {
            return "";
        }
        try {
            paramString1 = new String(RC4Base(HexString2Bytes(paramString1), paramString2), "GBK");
            return paramString1;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "";
    }

    private static byte[] RC4Base(byte[] input, String mKkey) {
        int x = 0;
        int y = 0;
        byte key[] = initKey(mKkey);
        int xorIndex;
        byte[] result = new byte[input.length];

        for (int i = 0; i < input.length; i++) {
            x = (x + 1) & 0xff;
            y = ((key[x] & 0xff) + y) & 0xff;
            byte tmp = key[x];
            key[x] = key[y];
            key[y] = tmp;
            xorIndex = ((key[x] & 0xff) + (key[y] & 0xff)) & 0xff;
            result[i] = (byte) (input[i] ^ key[xorIndex]);
        }
        return result;
    }

    private static byte[] HexString2Bytes(String paramString) {
        int j = paramString.length();
        byte[] arrayOfByte1 = new byte[j / 2];
        try {
            byte[] arrayOfByte2 = paramString.getBytes("GBK");
            int i = 0;
            for (; ; ) {
                if (i >= j / 2) {
                    break;
                }
                arrayOfByte1[i] = uniteBytes(arrayOfByte2[(i * 2)], arrayOfByte2[(i * 2 + 1)]);
                i += 1;
            }
            return arrayOfByte1;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return arrayOfByte1;
    }

    private static byte uniteBytes(byte paramByte1, byte paramByte2) {
        return (byte) ((char) ((char) Byte.decode("0x" + new String(new byte[]{paramByte1})).byteValue() << '\004') ^ (char) Byte.decode("0x" + new String(new byte[]{paramByte2})).byteValue());
    }

    private static byte[] initKey(String paramString) {

        byte[] b_key = new byte[0];
        try {
            b_key = paramString.getBytes("GBK");
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        byte state[] = new byte[256];

        for (int i = 0; i < 256; i++) {
            state[i] = (byte) i;
        }
        int index1 = 0;
        int index2 = 0;
        if (b_key == null || b_key.length == 0) {
            return null;
        }
        for (int i = 0; i < 256; i++) {
            index2 = ((b_key[index1] & 0xff) + (state[i] & 0xff) + index2) & 0xff;
            byte tmp = state[i];
            state[i] = state[index2];
            state[index2] = tmp;
            index1 = (index1 + 1) % b_key.length;
        }
        return state;
    }

    public static void main(String[] args) {
        String src
        String res = RC4Decode(src, "1481346264");
        System.out.println(TextUtil.getText2(res, "更新时间", "|"));
        String[] data = TextUtil.splitText(TextUtil.getText2(res, "{", "}"), "\n");
        for(String en:data){
            String str1 = TextUtil.getText2(en, "@mc", "|");
            String str2 = TextUtil.getText2(en, "@tp", "|");
            String str3 = TextUtil.getText2(en, "@dz", "|");
            System.out.println(str1);
            System.out.println(str2);
            System.out.println(str3);
        }
    }
}
